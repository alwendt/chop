
#define(test,code($1,$2,$3))

# costs are instruction bytes and nanosecs
define(costs,`eval(($1)+($2))')

# intermediate codes get high costs
define(IC,999999)

# a few special marker nodes that restrict optimization scope
define(NONOPTIMIZABLE,1999999)

# different subranges of constant types
%range lit 0 63;
%range wcon -32768 32767;
%range d16 -32768 32767;
%range d32 -2147483648 2147483647;

# Valid register numbers.  These specify subsets of the RegSet
%range regno 0 24;
%range fregno 25 28;
%range loregno 29 29;
%range hiregno 30 30;
%range fccreg 31 31;		# floating point condition code
%range rregno 0 0;		# result register; this is goofy but needed
%range fregno 25 25;

%terminal term;

#
#  various data type bits manipulated by the semantic actions
#

%type b 1;
%type w 2;
%type l 4;
%type f 010;
%type d 020;
%type v 040;

%type fd 030;
%type lf 014;
%type bwlfd 037;
%type bw 3;
%type wl 06;
%type bwl 7;
%type bwlf 017;
%type any -1;

lab    = term;

#
#  Any named data type (like l) can be used as a semantic action.
#  It intersects together types of all nonterminals plus the datatype,
#  and sets the type of all nonterminals and the defiens.
#

id     = term, term, l			# l => def(l)
       | term, global(term), l
       | lab
       ;

#
#  The default semantic action is "def", which intersects together types
#  of all nonterminals and sets the type of the defiens (plus the types
#  of all the nonterminals in the definition).
#

addop  = "+", add | "-", sub;


# numeric constants and address constants
ncon   = "%term%addop%ncon", addop(term,ncon,l)
       | term;

# for assembly assume identifier evals to an address constant
acon   = "%id%addop%ncon", addop(id,ncon,l)
       | "%id+%ncon", add(ncon,id,l)
       | id
       | term
       ;

# constants
Dcon  = "0D%term", double(term,d), d;

con    = acon, acon, l, costs(4,0)
       | Dcon
       ;

# different types
t      = b, b, b | w, w, w | l, l, l | f, f, f | d, d, d;
size   = X, 1, b | X, 2, w | X, 4, lf | X, 8, d;

# valid registers
reg    = fp, fp, wl
       | sp, sp, wl
       | "%regno", r(regno,4), bwl
       ;

# Valid address formats.
inx	= "%d16(%reg)", add(d16,reg,l)
	| "0(%reg)", reg
	| id, id;

#
#  "deref(size)" below means that the nonterminal "size" carries the type
#  of the result and the other nonterminals in the definition carry the type
#  of the input.  The "deref" semantic action intersects the type of "size"
#  and anything else listed and sets the type of the defiens "mem" to that
#  of "size".  It intersects together the types of all nonlisted nonterminals
#  (inx in this case) to get the source type.
#

# Contents of memory at an address
mem	= inx, m(inx,l,size), deref(size);


addr    = inx
	| acon
	| "%acon(%reg)", add(acon,reg,l)
	;

# the result comes always in a register

dx = fregno, f(fregno,size), fd;
dy = dx;
dz = dx;
fx = fregno, f(fregno,4), f;

z      = reg;

# source registers
x      = z | 0, 0, bwl;
y      = x;

# declare immediate
imm    = wcon, wcon;

ix     = "%regno", r(regno,4);
iy     = "%regno", r(regno,4);
iz     = "%regno", r(regno,4);
ir     = "%rregno", r(rregno,4);
fr     = "%fregno", f(fregno,4);
dr     = "%fregno", f(fregno,8);

rr     = ir | fr | dr;

loreg  = "%loregno", lo(loregno,4);
hireg   = "%hiregno",  hi(hiregno,4);

ilab   = term, term;
ap    = fp, fp, bwl;            # use the fp as an ap
sz     = term, term;		# size of item on stack
xlab   = term, term;

#
#  In the interests of opcode economy, there are no gt, ge, or ne opcodes
#  anywhere in this machine description.  Opcode economy is usually preferred
#  over structural economy, that is, we prefer a more complex formulation of
#  simpler opcodes.
#
cond = eq, eq | lt, lt | le, le;

# MIPS floating-point compares
fccs = eq, eq
     | olt, lt				# ordered && <
     | ole, le                          # ordered && <=
     ;

inst =
   "addu %z,%x,%y",    move(add(x,y,t),z,t),    def, costs(1,0)
 | "addi %z,0,%imm",   move(imm,z,t),           bwl, costs(1,0)
 | "addiu %z,%x,%imm", move(add(x,imm,t),z,t),  def, costs(1,0)
 | "and %z,%x,%y",     move(and(x,y,t),z,t),    def, costs(1,0)
 | "andi %z,%x,%imm",  move(and(x,imm,t),z,t),  def, costs(1,0)
 | "beq %x,%y,%lab",   jump(if(code(x,y,l),eq,signed,b),lab,l), def, costs(1,0)
 | "bgez %x,%lab",     jump(if(code(0,x,l),le,signed,b),lab,l), def, costs(1,0)
 | "bgtz %x,%lab",     jump(if(code(0,x,l),lt,signed,b),lab,l), def, costs(1,0)
 | "blez %x,%lab",     jump(if(code(x,0,l),le,signed,b),lab,l), def, costs(1,0)
 | "bltz %x,%lab",     jump(if(code(x,0,l),lt,signed,b),lab,l), def, costs(1,0)
 | "bne %x,%y,%lab",   jump(not(if(code(x,y,l),eq,signed,b),b),lab,l), def, costs(1,0)
 | "div %x,%y",        move(div(x,y,l),loreg,l), def, costs(1,0)
 | "div %x,%y",        move(sub(x,mul(div(x,y,l),y,l),l),hireg,l), def, costs(1,0)
 | "divu %x,%y",       move(div(x,y,u),loreg,l), def, costs(1,0)
 | "divu %x,%y",       move(sub(x,mul(div(x,y,u),y,u),u),hireg,l), def, costs(1,0)
 | "j %lab",           jump(true,lab,l), def, costs(1,0)
 | "jal %lab",         move(call(global(lab),l,0,t),rr,t), deref(t,rr), 1, Call
 | "jal %lab",         call(global(lab),l,0,t), deref(t), 1, Call
 | "jalr %x",          move(call(x,l,0,t),rr,t), deref(t,rr), 1, Call
 | "jalr %x",          call(x,l,0,t), deref(t), 1, Call
 | "jr %x",            jump(true,x,l), def, costs(1,0)
 | "la %z,%addr",      move(addr,z,l), def, costs(2,0)
 | "lb %z,%mem",       move(cvt(mem,b,l),z,l), def, costs(1,0)
 | "lbu %z,%mem",      move(ucvt(mem,b,l),z,l), def, costs(1,0)
 | "lh %z,%mem",       move(cvt(mem,w,l),z,l), def, costs(1,0)
 | "lhu %z,%mem",      move(ucvt(mem,w,l),z,l), def, costs(1,0)
 | "lui %z,%imm",      move(ash(imm,16,l),z,l), def, costs(1,0)
 | "lw %z,%mem",       move(mem,z,l), def, costs(1,0)
 | "mfhi %z",          move(hireg,z,l), def, costs(1,0)
 | "mflo %z",          move(loreg,z,l), def, costs(1,0)
 | "mthi %x",          move(x,hireg,l), def, costs(1,0)
 | "mtlo %x",          move(x,loreg,l), def, costs(1,0)
 | "mult %x,%y",       move(mul(x,y,l),loreg,l), def, costs(1,0)
 | "multu %x,%y",      move(mul(x,y,u),loreq,l), def, costs(1,0)
 | "nor %z,%x,%y",     move(not(or(x,y,l),l),z,l), def, costs(1,0)
 | "or %z,%x,%y",      move(or(x,y,l),z,l), def, costs(1,0)
 | "ori %z,%x,%imm",   move(or(x,imm,l),z,l), def, costs(1,0)
 | "ori %z,0,%imm",    move(imm,z,l), def, costs(1,0)
 | "sb %x,%mem",       move(x,mem,b), def, costs(1,0)
 | "sh %x,%mem",       move(x,mem,w), def, costs(1,0)
 | "sll %z,%x,%lit",   move(ash(x,lit,l),z,l), def, costs(1,0)
 | "sllv %z,%x,%y",    move(ash(x,y,l),z,l), def, costs(1,0)
#| "slt %z,%x,%y",
#| "slti %z,%x,%imm",
#| "sltiu %z,%x,%imm",
#| "sltu %z,%x,%imm",
 | "sra %z,%x,%lit",  move(ash(x,sub(0,lit,l),l),z,l), def, costs(1,0)
 | "srav %z,%x,%y",   move(ash(x,sub(0,y,l),l),z,l), def, costs(1,0)
 | "srl %z,%x,%imm",  move(bitfld(x,imm,sub(32,imm,l),l),z,l), def, costs(1,0)
 | "srlv %z,%x,%y",   move(bitfld(x,y,sub(32,y,l),l),z,l), def, costs(1,0)
 | "subu %z,%x,%y",   move(sub(x,y,l),z,l), def, costs(1,0)
 | "sw %x,%mem",      move(x,mem,l), def, costs(1,0)
 | "xor %z,%x,%y",    move(xor(x,y,l),z,l), def, costs(1,0)
 | "xori %z,%x,%imm", move(xor(x,imm,l),z,l), def, costs(1,0)
#
# floating-point instructions
#
 | "add.%t %dz,%dx,%dy", move(add(dx,dy,t),dz,t), fd, costs(1,0)
 | "bc1t %lab",          jump(fcc(fccreg,1),lab,l), def, costs(1,0)
 | "bc1f %lab",          jump(not(fcc(fccreg,1),b),lab,l), def, costs(1,0)
 | "c.%fccs.%t %dx,%dy", move(if(code(dx,dy,t),fccs,signed,b),fcc(fccreg,1),b), def, costs(1,0)
 | "cvt.d.f %dz,%fx",    move(cvt(fx,f,d),dz,d), deref(d,dz), costs(1,0)
 | "cvt.f.d %fz,%dx",    move(cvt(dx,d,f),fz,f), deref(f,fz), costs(1,0)
 | "div.%t %dz,%dx,%dy", move(div(dx,dy,t),dz,t), def, costs(1,0)
 | "lwc1 %dz,%mem",      move(mem,dz,t), f, costs(1,0)
 | "l.s %dz,%mem",       move(mem,dz,d), d, costs(2,0)
#| "mvc1 %dz,%dx",
 | "mov.%t %dz,%dx",     move(dx,dz,t), fd, costs(1,0)
#| "mtc1 %dz,%dx"
 | "mul%t %dz,%dx,%dy",  move(mul(dx,dy,t),dz,t), fd, costs(1,0)
 | "neg.%t %dz,%dx",     move(sub(0,dx,t),dz,t), fd, costs(1,0)
 | "sub.%t %dz,%dx,%dy", move(sub(dx,dy,t),dz,t), fd, costs(1,0)
 | "swc1 %dx,%mem",      move(dx,mem,f), f, costs(1,0)
 | "s.d %dx,%mem",       move(dx,mem,d), d, costs(1,0)
 | `"# jump to return"', ret(),   def, costs(1,0)
 | "%lab:",              label(lab)


# Intermediate Instructions.  High costs so they will get optimized out.
# This section can be copied to a retarget with minimal changes.

   | "ADDD %dx,%dy",       move(add(dx,dy,d),dz,d), d, IC
   | "ADDF %dx,%dy",       move(add(dx,dy,f),dz,f), f, IC
   | "ADDI %ix,%iy",         move(add(ix,iy,l),iz,l), l, IC
   | "ADDP %ix,%iy",         move(add(ix,iy,l),iz,l), l, IC
   | "ADDRFP",               move(add(term,ap,l),iz,l), l, IC
   | "ADDRGP",               move(global(term),iz,l), l, IC
   | "ADDRLP %term",         move(add(term,fp,l),iz,l), l, IC
   | "ADDU %ix,%iy",         move(add(ix,iy,l),iz,l), l, IC
   | "ARGB %sz,%con,%ix",    pushblock(ix,l), any, NONOPTIMIZABLE
   | "ARGD %sz,%con,%dx",   move(dx,m(add(con,sp,l),l,8),d), any, IC
   | "ARGF %sz,%con,%dx",   move(dx,m(add(con,sp,l),l,4),f), any, IC
   | "ARGI %sz,%con,%ix",    move(ix,m(add(con,sp,l),l,4),l), any, IC
   | "ARGP %sz,%con,%ix",    move(ix,m(add(con,sp,l),l,4),l), any, IC
   | "ARGU %sz,%con,%ix",    move(ix,m(add(con,sp,l),l,4),l), any, IC

   | "ARGI %sz,%zero,%ix",   move(ix,r(arg0,4),l), any, IC
   | "ARGI %sz,%four,%ix",    move(ix,r(arg1,4),l), any, IC
   | "ARGI %sz,%eight,%ix",    move(ix,r(arg2,4),l), any, IC
   | "ARGI %sz,%twelve,%ix",  move(ix,r(arg3,4),l),  any, IC
#
#  Structure assignment operators are implemented by hard code in
#  the gen.c file.  They are not presently pattern-matched.
#
   | "ASGNB %ix,%iy",        memcpy(ix,iy,ilab), def, NONOPTIMIZABLE
   | "ASGNC %ix,%iy",        move(iy,m(ix,l,1),b), b, IC
   | "ASGND %ix,%dy",       move(dy,m(ix,l,8),d), d, IC
   | "ASGNF %ix,%dy",       move(dy,m(ix,l,4),f), f, IC
   | "ASGNI %ix,%iy",        move(iy,m(ix,l,4),l), l, IC
   | "ASGNP %ix,%iy",        move(iy,m(ix,l,4),l), l, IC
   | "ASGNS %ix,%iy",        move(iy,m(ix,l,2),w), w, IC
   | "BANDU %ix,%iy",        move(and(not(not(ix,l),l),iy,l),iz,l), l, IC
   | "BCOMU %ix",            move(not(ix,l),iz,l), l, IC
   | "BORU %ix,%iy",         move(or(ix,iy,l),iz,l), l, IC
   | "BXORU %ix,%iy",        move(xor(ix,iy,l),iz,l), l, IC
   | "CALLB %ix,%iy",        memcpy(call(ix,l,0,l),iy,ilab), deref(), IC, Call
   | "CALLD %ix",            move(call(ix,l,0,d),dr,d), deref(d,dr), IC, Call
   | "CALLF %ix",            move(call(ix,l,0,f),fr,f), deref(f,fr), IC, Call
   | "CALLI %ix",            move(call(ix,l,0,l),ir,l), deref(l,ir), IC, Call
   | "CALLV %ix",            call(ix,l,0,l), deref(), IC, Call
   | "CNSTC",                move(xlab,iz,l), def, IC
   | "CNSTD",                move(xlab,iz,d), def, IC
   | "CNSTF",                move(xlab,iz,f), def, IC
   | "CNSTI",                move(xlab,iz,l), def, IC 
   | "CNSTP",                move(xlab,iz,l), def, IC
   | "CNSTS",                move(xlab,iz,l), def, IC 
   | "CNSTU",                move(xlab,iz,l), def, IC

   | "CVCI %ix",          move(cvt(ix,b,l),iz,l),  deref(l,iz), IC
   | "CVCU %ix",          move(ucvt(ix,b,l),iz,l), deref(l,iz), IC
   | "CVDF %dx",          move(cvt(dx,d,f),fz,f),  deref(f,fz), IC
   | "CVDI %dx",          move(cvt(dx,d,l),iz,l),  deref(l,iz), IC
   | "CVFD %dx",          move(cvt(fx,f,d),dz,d),  deref(d,dz), IC
   | "CVIC %ix",          move(cvt(ix,l,b),iz,b),  deref(b,iz), IC
   | "CVID %ix",          move(cvt(ix,l,d),dz,d),  deref(d,dz), IC
   | "CVIS %ix",          move(cvt(ix,l,w),iz,w),  deref(w,iz), IC
   | "CVIU %ix",          move(ix,iz,l),             l, IC
   | "CVPU %ix",          move(ix,iz,l),             l, IC
   | "CVSI %ix",          move(cvt(ix,w,l),iz,l),  deref(l,iz), IC
   | "CVSU %ix",          move(ucvt(ix,w,l),iz,l), deref(l,iz), IC
   | "CVUC %ix",          move(cvt(ix,l,b),iz,b),  deref(b,iz), IC
   | "CVUI %ix",          move(ix,iz,l),             l, IC
   | "CVUP %ix",          move(ix,iz,l),             l, IC
   | "CVUS %ix",          move(cvt(ix,l,w),iz,w),  deref(w,iz), IC

   | "DIVD %dx,%dy",      move(div(dx,dy,d),dz,d), d, IC
   | "DIVF %dx,%dy",      move(div(dx,dy,f),dz,f), f, IC
   | "DIVI %ix,%iy",      move(div(ix,iy,l),iz,l), l, IC
   | "DIVU %ix,%iy",      move(udiv(ix,iy,l),iz,l), l, IC
   | "EQD %dx,%dy",       jump(if(code(dx,dy,d),eq,signed,b),ilab,l), def, IC
   | "EQF %dx,%dy",       jump(if(code(dx,dy,f),eq,signed,b),ilab,l), def, IC
   | "EQI %ix,%iy",       jump(if(code(ix,iy,l),eq,signed,b),ilab,l), def, IC
   | "EQU %ix,%iy",       jump(if(code(ix,iy,l),eq,signed,b),ilab,l), def, IC

   | "INDIRB %ix",        move(ix,iy,l), def, NONOPTIMIZABLE
   | "INDIRC %ix",        move(m(ix,l,1),iz,b), def, IC
   | "INDIRD %ix",        move(m(ix,l,8),dz,d), d, IC
   | "INDIRF %ix",        move(m(ix,l,4),dz,f), f, IC
   | "INDIRI %ix",        move(m(ix,l,4),iz,l), def, IC
   | "INDIRP %ix",        move(m(ix,l,4),iz,l), def, IC
   | "INDIRS %ix",        move(m(ix,l,2),iz,w), def, IC
   | "JUMPV %ix",         jump(true,ix,l), l, IC
   | "LABELV",            label(term), def, IC
   | "LED %dx,%dy",       jump(if(code(dx,dy,d),le,signed,b),ilab,l), def, IC
   | "LEF %dx,%dy",       jump(if(code(dx,dy,f),le,signed,b),ilab,l), def, IC
   | "LEI %ix,%iy",       jump(if(code(ix,iy,l),le,signed,b),ilab,l), def, IC
   | "LEU %ix,%iy",       jump(if(code(ix,iy,l),le,unsigned,b),ilab,l), def, IC
#
#  The front end inserts LOAD opcodes in between nodes that it doesn't want
#  combined.  Following are not pattern-matched.  The patterns appear here
#  in order to derive reasonable signatures.
#
   | "LOADB %iz",            move(iz,iz,l), l, NONOPTIMIZABLE
   | "LOADC %iz",            move(iz,iz,l), l, NONOPTIMIZABLE
   | "LOADD %dz",           move(dz,dz,d), d, NONOPTIMIZABLE
   | "LOADF %dz",           move(dz,dz,f), f, NONOPTIMIZABLE
   | "LOADI %iz",            move(iz,iz,l), l, NONOPTIMIZABLE 
   | "LOADP %iz",            move(iz,iz,l), l, NONOPTIMIZABLE 
   | "LOADS %iz",            move(iz,iz,l), l, NONOPTIMIZABLE
   | "LOADU %iz",            move(iz,iz,l), l, NONOPTIMIZABLE
   | "LSHI %ix,%iy",         move(ash(ix,iy,l),iz,l), l, IC
   | "LSHU %ix,%iy",         move(ash(ix,iy,l),iz,l), l, IC
   | "LTD %dx,%dy",        jump(if(code(dx,dy,d),lt,signed,b),ilab,l), def, IC
   | "LTF %dx,%dy",        jump(if(code(dx,dy,f),lt,signed,b),ilab,l), def, IC
   | "LTI %ix,%iy",          jump(if(code(ix,iy,l),lt,signed,b),ilab,l), def, IC
   | "LTU %ix,%iy",          jump(if(code(ix,iy,l),lt,unsigned,b),ilab,l), def, IC
   | "MODI %ix,%iy",         move(sub(ix,mul(div(ix,iy,l),iy,l),l),iz,l), l, IC
   | "MODU %ix,%iy",         move(sub(ix,mul(div(ix,iy,u),iy,u),l),iz,l), l, IC
   | "MULD %ix,%iy",         move(mul(dx,dy,d),dz,d), d, IC
   | "MULF %ix,%iy",         move(mul(dx,dy,f),dz,f), f, IC
   | "MULI %ix,%iy",         move(mul(ix,iy,l),iz,l), l, IC
   | "MULU %ix,%iy",         move(mul(ix,iy,u),iz,l), l, IC
   | "NED %dx,%dy",         jump(not(if(code(dx,dy,d),eq,signed,b),b),ilab,l), d, IC
   | "NEF %dx,%dy",         jump(not(if(code(dx,dy,f),eq,signed,b),b),ilab,l), f, IC
   | "NEGD %dx",            move(sub(0,dx,d),dz,d), d, IC
   | "NEGF %dx",            move(sub(0,dx,f),dz,f), f, IC
   | "NEGI %ix",             move(sub(0,ix,l),iz,l), l, IC
   | "NEI %ix,%iy",          jump(if(code(ix,iy,l),ne,signed,b),ilab,l), def, IC
   | "NEU %ix,%iy",          jump(if(code(ix,iy,l),ne,signed,b),ilab,l), def, IC
   | "RETD %dx",            ret(dx,d), d, IC
   | "RETF %dx",            ret(dx,f), f, IC
   | "RETI %ix",             ret(ix,l), l, IC
   | "RETV",                 ret(), l, IC
   | "RSHI %ix,%iy",         move(ash(ix,sub(0,iy,l),l),iz,l), l, IC
   | "RSHU %ix,%iy",         move(bitfld(ix,iy,sub(32,iy,l),l),iz,l), l, IC
   | "SUBD %dx,%dy",       move(sub(dx,dy,d),dz,d), d, IC
   | "SUBF %dx,%dy",       move(sub(dx,dy,f),dz,f), f, IC
   | "SUBI %ix,%iy",         move(sub(ix,iy,l),iz,l), l, IC
   | "SUBP %ix,%iy",         move(sub(ix,iy,l),iz,l), l, IC
   | "SUBU %ix,%iy",         move(sub(ix,iy,l),iz,l), l, IC
#  End of Intermediate Code Definitions
   ;


